// Top-level build file where you can add configuration options common to all sub-projects/modules.

import com.android.build.gradle.internal.tasks.AndroidTestTask

buildscript {
    ext.isCi = Boolean.parseBoolean(System.getProperty('CI', 'false'))

    ext.versions = [
            'compileSdk'    : 26,
            'buildTools'    : '26.0.1',
            'minSdk'        : 19,
            'targetSdk'     : 26,

            'astl'          : '0.5',
            'espresso'      : '2.2.2',
            'kotlin'        : '1.1.3-2',
            'leakCanary'    : '1.5.1',
            'retrofit'      : '2.3.0',
            'supportLibrary': '26.1.0',
    ]

    ext.libs = [
            'arch'    : [
                    'room': ''
            ],

            'dagger'  : [

            ],

            'kotlin'  : [
                    'stdlib': "org.jetbrains.kotlin:kotlin-stdlib-jre7:${versions.kotlin}",
                    'test'  : "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}",
            ],

            'retrofit': [
                    'core'  : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
                    'mock'  : "com.squareup.retrofit2:retrofit-mock:${versions.retrofit}",
                    'moshi' : "com.squareup.retrofit2:converter-moshi:${versions.retrofit}",
                    'rxjava': "com.squareup.retrofit2:adapter-rxjava:${versions.retrofit}",
            ],

            'rxjava'  : [
                    'android': 'io.reactivex.rxjava2:rxandroid:2.0.1',
                    'kotlin' : 'io.reactivex.rxjava2:rxkotlin:2.1.0'
            ],

            'support' : [
                    'annotations' : "com.android.support:support-annotations:${versions.supportLibrary}",
                    'appcompat'   : "com.android.support:appcompat-v7:${versions.supportLibrary}",
                    'design'      : "com.android.support:design:${versions.supportLibrary}",
                    'cardview'    : "com.android.support:cardview-v7:${versions.supportLibrary}",
                    'leanback'    : "com.android.support:leanback-v17:${versions.supportLibrary}",
                    'recyclerview': "com.android.support:recyclerview-v7:${versions.supportLibrary}"
            ],

            'moshi'   : 'com.squareup.moshi:moshi:1.5.0',
            'junit'   : 'junit:junit:4.12',
            'timber'  : 'com.jakewharton.timber:timber:4.5.1',
            'truth'   : 'com.google.truth:truth:0.35',
    ]

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-beta5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ('com.android.build.gradle.AppPlugin' == plugin.class.name ||
                'com.android.build.gradle.LibraryPlugin' == plugin.class.name) {

            project.android {
                compileSdkVersion versions.compileSdk
                buildToolsVersion versions.buildTools

                sourceSets {
                    main.java.srcDirs += 'src/main/kotlin'
                    test.java.srcDirs += 'src/test/kotlin'
                    androidTest.java.srcDirs += 'src/androidTest/kotlin'
                }

                defaultConfig {
                    minSdkVersion versions.minSdk
                    targetSdkVersion versions.targetSdk
                    versionName "${VERSION_NAME}"
                    versionCode VERSION_CODE.toInteger()
                }

                dexOptions {
                    preDexLibraries = !rootProject.hasProperty('disablePreDex')
                }

                packagingOptions {
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/rxjava.properties'
                }

                // This allows us see tests execution progress in the output on the CI.
                testOptions.unitTests.all {
                    testLogging {
                        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                        exceptionFormat 'full'
                    }
                }

                lintOptions {
                    textReport true
                    textOutput 'stdout'
                    lintConfig rootProject.file('lint.xml')
                    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
                    checkReleaseBuilds false
                }
            }
        }

        afterEvaluate {
            // Log instrumentation tests results.
            tasks.withType(AndroidTestTask) { task ->
                task.doFirst {
                    logging.level = LogLevel.INFO
                }
                task.doLast {
                    logging.level = LogLevel.LIFECYCLE
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
